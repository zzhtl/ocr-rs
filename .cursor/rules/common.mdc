---
description: 
globs: 
alwaysApply: true
---
# 后端开发规则与最佳实践

本文档专门针对后端服务开发制定规则和最佳实践，重点关注微服务架构、API设计、数据处理和系统可靠性。

## AI助手行为规范

### 沟通风格
- 默认使用中文回复，开头称呼"zzhtl："
- 回复要简洁、直击要点，避免冗长说明
- 对复杂问题提供分步骤解决方案
- 代码示例必须可直接运行，包含完整的错误处理

### 任务执行原则
- **先理解需求**：确认业务场景和技术要求后再实现
- **渐进式开发**：复杂功能分解为独立的小任务
- **主动验证**：每次代码修改后主动运行测试和lint检查
- **问题导向**：遇到歧义时主动询问，不做假设
- **架构优先**：多模块项目先设计接口，再实现细节

## 后端服务架构原则

### 分层设计（强制要求）
```
├── API层（Handler/Controller）  - 请求响应处理
├── 业务逻辑层（Service/UseCase） - 核心业务逻辑
├── 数据访问层（Repository）     - 数据持久化
└── 基础设施层（Infrastructure） - 外部依赖
```

### 核心设计模式
- **依赖注入**：所有依赖通过接口注入，避免直接实例化
- **接口优先**：定义清晰的接口边界，便于测试和替换
- **错误处理**：统一错误处理机制，区分业务错误和系统错误
- **配置分离**：敏感配置外部化，支持多环境部署

### 数据流规范
```
请求 → API验证 → 业务逻辑 → 数据操作 → 响应构造 → 返回
```
- API层只做参数验证和响应构造
- 业务层专注核心逻辑，不处理HTTP细节
- 数据层只负责CRUD操作，不包含业务逻辑

## 代码质量要求

### 函数设计标准
- **单一职责**：一个函数只做一件事，函数名清晰表达用途
- **长度限制**：函数体不超过25行，超过必须拆分
- **参数控制**：参数不超过4个，复杂参数用结构体封装
- **返回值**：明确区分正常返回和错误情况
- **无副作用**：避免全局状态修改，函数行为可预测

### 命名规范
- **变量**：使用有意义的名称，避免缩写
- **函数**：动词开头，清晰表达行为(`GetUser`, `CreateOrder`)
- **常量**：全大写下划线分隔，表达业务含义
- **包名**：简短小写，表达功能领域

### 错误处理策略
- **明确分类**：区分业务错误、验证错误、系统错误
- **上下文传递**：包装错误时添加上下文信息
- **优雅降级**：关键路径失败时提供备选方案
- **日志记录**：记录足够信息用于问题排查

## API设计规范

### RESTful设计
- **资源路径**：使用名词，体现资源层次关系
- **HTTP方法**：GET查询、POST创建、PUT更新、DELETE删除
- **状态码**：合理使用HTTP状态码表达结果
- **版本管理**：通过路径或头部进行API版本控制

### 数据传输
- **请求验证**：严格验证输入参数，拒绝非法数据
- **响应标准化**：统一响应格式，包含状态、数据、错误信息
- **分页处理**：大数据集合必须分页，提供总数和游标信息
- **安全过滤**：敏感字段不返回给客户端

### gRPC服务（如适用）
- **服务定义**：清晰的proto文件，包含完整注释
- **错误码**：使用标准gRPC错误码，附加详细信息
- **流处理**：合理使用单向流和双向流
- **认证授权**：集成统一的认证中间件

## 数据处理规范

### 数据库操作
- **事务管理**：明确事务边界，避免长事务
- **连接池**：合理配置连接池参数
- **查询优化**：避免N+1查询，使用合适的索引
- **数据一致性**：关键操作使用事务保证ACID特性

### 缓存策略
- **缓存层级**：本地缓存 + 分布式缓存
- **失效策略**：设置合理的TTL，避免缓存雪崩
- **一致性**：更新数据时同步清理缓存
- **降级处理**：缓存失效时的数据获取备选方案

### 消息队列
- **异步处理**：耗时操作异步化，提高响应速度
- **重试机制**：消息处理失败时的重试策略
- **死信处理**：失败消息的回收和处理机制
- **顺序保证**：需要时确保消息处理順序

## 系统可靠性

### 监控与观测
- **日志记录**：结构化日志，包含请求ID和上下文
- **指标监控**：QPS、延迟、错误率、资源使用率
- **链路追踪**：关键流程的全链路跟踪
- **告警机制**：异常情况及时通知

### 容错设计
- **熔断器**：防止故障传播，快速失败
- **重试机制**：网络调用失败时的智能重试
- **超时控制**：所有外部调用设置合理超时
- **降级策略**：核心功能不可用时的备选方案

### 性能优化
- **基准测试**：关键路径性能基准和回归检测
- **内存管理**：避免内存泄漏，合理使用对象池
- **并发控制**：合理使用协程/线程，避免资源竞争
- **批量处理**：数据密集操作使用批量处理模式

## 测试策略

### 测试层次
- **单元测试**：覆盖核心业务逻辑，使用mock隔离依赖
- **集成测试**：验证模块间协作，使用测试数据库
- **契约测试**：验证API接口兼容性
- **性能测试**：关键接口压力测试和性能基准

### 测试原则
- **快速反馈**：单元测试运行时间控制在秒级
- **独立性**：测试间无依赖，可并行执行
- **覆盖率**：核心业务逻辑测试覆盖率 > 80%
- **边界测试**：异常情况和边界条件的测试用例

## 安全要求

### 输入安全
- **参数验证**：严格校验所有外部输入
- **SQL注入防护**：使用参数化查询
- **XSS防护**：输出内容进行适当编码
- **文件上传**：验证文件类型和大小限制

### 认证授权
- **身份认证**：使用成熟的认证机制（JWT、OAuth等）
- **权限控制**：基于角色的访问控制(RBAC)
- **会话管理**：安全的会话创建和销毁
- **审计日志**：记录关键操作的审计信息

## 部署运维

### 环境一致性
- **容器化**：使用Docker确保环境一致性
- **配置管理**：环境变量和配置文件分离
- **健康检查**：提供应用健康状态检查接口
- **优雅关闭**：处理停机信号，完成当前请求后关闭

### CI/CD流程
- **代码检查**：lint检查和安全扫描
- **自动测试**：提交代码自动运行测试套件
- **构建流水线**：自动构建和部署到不同环境
- **回滚机制**：部署失败时快速回滚到稳定版本

---

## AI助手执行指南

当收到开发任务时，请按以下顺序执行：

1. **理解需求**：明确业务场景和技术要求
2. **设计方案**：选择合适的架构模式和技术栈
3. **接口设计**：定义清晰的API接口和数据结构
4. **实现核心逻辑**：编写业务逻辑代码
5. **编写测试**：为关键功能编写单元测试
6. **代码检查**：运行lint和测试确保质量
7. **文档更新**：更新相关技术文档

每个步骤完成后主动反馈进度，遇到问题及时寻求澄清。
